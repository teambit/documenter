/**
 * this is the main configuration file of your bit workspace.
 * for full documentation, please see: https://docs.bit.dev/configuration
**/{
  "$schema": "",
  /**
   * main configuration of the Bit workspace.
  **/
  "workspace": {
    /**
     * applies only on bit.dev. configure the main owner of your workspace.
    **/
    "owner": "ripples",
    /**
     * set the default scope when there is no matching for the component in the components array.
     **/
    "defaultScope": "bit.evangalist",
    /**
     * set the default directory when there is no matching for the component in the components array.
     **/
    "defaultDirectory": "components",
    /**
    * set the default structure of components in your project.
    **/
    "components": [
      {
        "defaultScope": "ui",
        "directory": "base"
      },
      {
        "defaultScope": "extensions",
        "directory": "extensions"
      }
    ]
  },
  "extensions/react-ts": {
    "template": "react"
  },

  /**
   * main configuration for component dependency resolution.
  **/
  "dependencyResolver": {
    /**
     * choose the package manager for Bit to use. you can choose between 'npm', 'yarn', 'pnpm'
     * and 'librarian'. our recommendation is use 'librarian' which reduces package duplicates
     * and totally removes the need of a 'node_modules' directory in your project.
    */
    "packageManager": "librarian",
    /**
    * If true, then Bit will add the "--strict-peer-dependencies" option when invoking package managers.
    * This causes "bit install" to fail if there are unsatisfied peer dependencies, which is
    * an invalid state that can cause build failures or incompatible dependency versions.
    * (For historical reasons, JavaScript package managers generally do not treat this invalid
    * state as an error.)
    *
    * The default value is false to avoid legacy compatibility issues.
    * It is strongly recommended to set strictPeerDependencies=true.
    */
    "strictPeerDependencies": true,
    /**
     * map of extra arguments to pass to the configured package manager upon the installation
     * of dependencies.
    */
    "extraArgs": []
  },
  /**
   * workspace variants allow to set different subsets of configuration for components in your workspace.
   * this is extremely useful for upgrading, aligning and building components with a
   * new set of dependencies.
  **/
  "variants": {
    /**
     * wildcards can be used to configure components under a specific namespace.
     * this configuration applies the react extensions on all components the `ui` namespace.
    **/
    "extensions/*": {
      "extensions": {
        /**
        * configure extensions to be compiled by the TypeScript environment.
        */
        // "typescript": {},
        // "@teambit/envs": {
          // "env": "@teambit/base"
        // },
        /**
        * configure the creation of new components in your workspace through the `bit create` command.
        * this is helpful for setting component structure standards.
        **/
        "create": {
          /**
          * default component template for Bit to use for creation of components upon `bit create`.
          * default template is:
          */
          "defaultTemplate": "bit.create/extension"
        }
      }
    },
    "ui/*": {
      "extensions": {
        "extensions/react-ts": {},
        "compile": {
          "compiler": "@bit/bit.evangalist.extensions.react-ts"
        },
        "@teambit/envs": {
          "env": "React",
          "config": {
          }
        },
        /**
        * main configuration file for handling the build process of components.
        */
        "flows": {
          /**
          * configure build tasks. configuration of build tasks is basically a map of `task name`
          * pointed to an array of tasks. each task can be either a bash command or an extension
          * which exposes a task. reserved task names:  build, test, runs on pre-tag.
          */
          "tasks": {
            "build": [
              "@bit/bit.evangalist.extensions.react-ts:transpile"
            ]
          }
        }
      }
    }
  }
}